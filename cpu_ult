module cpu (
    
    input  wire        clk,     // Clock do sistema
    input  wire        enviar, // botao para enviar
    input  wire        ligar,
    input  wire [17:0] entrada,
	 
	 // Imediato
    output reg [15:0] saida, 
    output reg led,
    output reg led2
    //falta a saída do endereço

);

wire [2:0] opcode = entrada[17:15];
wire [3:0] D1 = entrada[14:11];
wire [3:0] r2 = entrada[10:7];
wire [3:0] r3 = entrada[6:3];
wire [6:0] imediato = entrada[6:0];

reg [20:0] counter = 0;

reg ligar_atual;
reg ligar_anterior;
reg flag_ligar = 0;

reg enviar_atual;
reg enviar_anterior;
reg flag_enviar;

wire flag_ram; //flag puxada da memoria ram

wire [15:0] resultado;

parameter INIT = 0, WAIT = 1, PROCESSAR = 2, SHOW = 3;

reg [2:0] state = 0;

always @(posedge clk) begin
    case(state)

    INIT: begin
        if (!ligar) state <= WAIT;
    end

	WAIT: begin
        
    end
    PROCESSAR: begin
        if (flag_ram) state <= SHOW;
        if (!flag_ram) state <= PROCESSAR; 
    end
    SHOW: begin
        saida <= resultado;
        if (enviar) state <=SHOW;
        if (!enviar) state <= WAIT;
    end

    endcase
end   


always @(posedge clk) begin
    ligar_anterior <= ligar_atual;
    ligar_atual <= ligar;

    if (ligar_atual == 1 && ligar_anterior == 0) begin
        flag_ligar <= ~flag_ligar;
        led <= ~flag_ligar;
    end
end

always @(posedge clk) begin
    enviar_anterior <= enviar_atual;
    enviar_atual <= enviar;

    if (enviar_atual == 1 && enviar_anterior == 0) begin
        flag_enviar <= 1;
        led2 <= flag_enviar;

    end
    if (counter != 10000) begin
        counter <= counter + 1;
    end else begin
        counter <= 0;
        flag_enviar <= 0;
        led2 <= flag_enviar; 
    end
end


memoria memory(
    .flag_ram(flag_ram),
    .clk(clk),
    .opcode(opcode),
    .r2(dado_R2),
    .r3(dado_R3),
    .imediato(imediato),
    .saida(resultado),
    .enviar(flag_enviar)
);

// compartilhados: enviar, clk, opcode, r2, D1, entrada, flag_geral
// recebidos: resultado, flag_ram

endmodule
